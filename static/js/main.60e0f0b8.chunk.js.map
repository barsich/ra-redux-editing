{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/ServiceAdd.js","components/ServiceFilter.js","components/ServiceList.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","reducers/serviceFilter.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","CHANGE_SERVICE_FIELD","EDIT_SERVICE","CANCEL_EDIT_SERVICE","CHANGE_FILTER_FIELD","changeServiceField","name","value","type","payload","cancelEditService","service","ServiceAdd","useState","isEditing","setEditing","useSelector","state","serviceAdd","dispatch","useDispatch","useEffect","price","handleChange","evt","target","onSubmit","preventDefault","onChange","onClick","ServiceFilter","serviceFilter","changeFilterField","ServiceList","services","serviceList","filter","filteredServices","prettyName","toLowerCase","prettyFilter","trim","includes","handleRemove","id","removeService","handleEdit","editService","map","App","Boolean","window","location","hostname","match","initialState","uuidv4","currentlyEditing","reducer","combineReducers","action","editableId","editableName","editablePrice","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60e0f0b8.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const CANCEL_EDIT_SERVICE = 'CANCEL_EDIT_SERVICE';\nexport const CHANGE_FILTER_FIELD = 'CHANGE_FILTER_FIELD';\n","import { ADD_SERVICE, REMOVE_SERVICE, CHANGE_SERVICE_FIELD, EDIT_SERVICE, CANCEL_EDIT_SERVICE, CHANGE_FILTER_FIELD } from './actionTypes';\n\nexport function addService(name, price) {\n  return { type: ADD_SERVICE, payload: { name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function editService(service) {\n  return { type: EDIT_SERVICE, payload: { service } };\n}\n\nexport function cancelEditService(service) {\n  return { type: CANCEL_EDIT_SERVICE, payload: { service } };\n}\n\nexport function changeFilterField(value) {\n  return { type: CHANGE_FILTER_FIELD, payload: { value } };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeServiceField, addService, cancelEditService } from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n  const [isEditing, setEditing] = useState(false);\n  const service = useSelector((state) => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  // отвечает за появление/исчезновение кнопки cancel\n  useEffect(() => {\n    if (service.name !== '' || service.price !== '') {\n      setEditing(true);\n    } else {\n      setEditing(false);\n    }\n  }, [service.name, service.price]);\n\n  const handleChange = (evt) => {\n    let { name, value } = evt.target;\n    dispatch(changeServiceField(name, value));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    // без имени нельзя добавить, без цены можно\n    if (service.name === '') {\n      return;\n    }\n    dispatch(addService(service.name, service.price));\n    // очистка формы\n    dispatch(changeServiceField('name', ''));\n    dispatch(changeServiceField('price', ''));\n  };\n\n  const handleCancel = () => {\n    // очистка формы\n    dispatch(changeServiceField('name', ''));\n    dispatch(changeServiceField('price', ''));\n    dispatch(cancelEditService());\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" onChange={handleChange} value={service.name} />\n      <input name=\"price\" onChange={handleChange} value={service.price} />\n      <button type=\"submit\">Save</button>\n      {isEditing && (\n        <button type=\"reset\" onClick={handleCancel}>\n          Cancel\n        </button>\n      )}\n    </form>\n  );\n}\n\nexport default ServiceAdd;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilterField } from '../actions/actionCreators';\n\nfunction ServiceFilter() {\n  const value = useSelector((state) => state.serviceFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    let { value } = evt.target;\n    dispatch(changeFilterField(value));\n  };\n\n  return (\n    <label>\n      Фильтр: <input type=\"text\" onChange={handleChange} value={value}></input>\n    </label>\n  );\n}\n\nexport default ServiceFilter;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  removeService,\n  editService,\n  changeServiceField,\n  cancelEditService,\n} from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const dispatch = useDispatch();\n  const services = useSelector((state) => state.serviceList.services);\n  const filter = useSelector((state) => state.serviceFilter);\n  const filteredServices = services.filter((service) => {\n    const prettyName = service.name.toLowerCase();\n    const prettyFilter = filter.trim().toLowerCase();\n    if (prettyFilter !== '') {\n      return prettyName.includes(prettyFilter);\n    } else {\n      return service;\n    }\n  });\n\n  const handleRemove = (id) => {\n    dispatch(removeService(id));\n    dispatch(cancelEditService());\n  };\n\n  const handleEdit = (service) => {\n    dispatch(editService(service));\n    const { name, price } = service;\n    dispatch(changeServiceField('name', name));\n    dispatch(changeServiceField('price', price));\n  };\n\n  return (\n    <ul>\n      {filteredServices.map((service) => (\n        <li key={service.id}>\n          {service.name} {service.price}\n          <button onClick={() => handleEdit(service)}>{`\\u270E`}</button>\n          <button onClick={() => handleRemove(service.id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ServiceList;\n","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceFilter from './components/ServiceFilter';\nimport ServiceList from './components/ServiceList';\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceFilter />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport {\n  ADD_SERVICE,\n  CANCEL_EDIT_SERVICE,\n  EDIT_SERVICE,\n  REMOVE_SERVICE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  services: [\n    { id: uuidv4(), name: 'Замена стекла', price: '21000' },\n    { id: uuidv4(), name: 'Замена дисплея', price: '25000' },\n    { id: uuidv4(), name: 'Постановка зачета', price: 'Бесплатно' },\n    { id: uuidv4(), name: 'Отправка на доработку', price: '50' },\n  ],\n  currentlyEditing: {\n    id: '',\n    name: '',\n    price: '',\n  },\n};\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE:\n      const { name, price } = action.payload;\n      if (state.currentlyEditing.id) {\n        return {\n          ...state,\n          services: state.services.map((service) => {\n            if (service.id === state.currentlyEditing.id) {\n              return { id: service.id, name, price };\n            }\n            return service;\n          }),\n          currentlyEditing: { id: '', name: '', price: '' },\n        };\n      } else {\n        return {\n          ...state,\n          services: [...state.services, { id: uuidv4(), name, price: price }],\n        };\n      }\n    case REMOVE_SERVICE:\n      const { id } = action.payload;\n      return { ...state, services: state.services.filter((service) => service.id !== id) };\n    case EDIT_SERVICE:\n      const { service } = action.payload;\n      const editableId = service.id;\n      const editableName = service.name;\n      const editablePrice = service.price;\n      return {\n        ...state,\n        currentlyEditing: { id: editableId, name: editableName, price: editablePrice },\n      };\n    case CANCEL_EDIT_SERVICE:\n      return {\n        ...state,\n        currentlyEditing: { id: '', name: '', price: '' },\n      };\n    default:\n      return state;\n  }\n}\n","import { CHANGE_SERVICE_FIELD } from '../actions/actionTypes';\n\nconst initialState = { name: '', price: '' };\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const { name, value } = action.payload;\n      return { ...state, [name]: value.trim() };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from 'redux';\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\nimport serviceFilterReducer from '../reducers/serviceFilter';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n  serviceFilter: serviceFilterReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import { CHANGE_FILTER_FIELD } from '../actions/actionTypes';\n\nconst initialState = '';\n\nexport default function serviceFilterReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_FILTER_FIELD:\n      const { value } = action.payload;\n      return value;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}